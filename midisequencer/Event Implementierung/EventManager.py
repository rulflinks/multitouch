import EventWorkerimport time''' - Class: EventManager- Description:This class is the worker's manager. Here we can register new objectswith callback functions while the worker is busy working'''class EventManager():	def __init__(self, **kwargs):		self.__log('initializing EventManager')				self.__callbacks={} # dictionary for callback methods <obj>:<callback>				# instantiate and start EventWorker-Thread		self.__log('instantiating and starting EventWorker-Thread')		self.worker=EventWorker.EventWorker(manager=self, ticktime=0.5)		self.worker.start()	''' register an object '''	def register(self, object, method):		self.__log('registering callback method for ' + object.id)		self.__callbacks[object]=method				# tell worker to get new registered method:		self.worker.refreshConfig.set()			''' for EventWorker to fetch it '''	def getCallbacks(self):		return self.__callbacks			''' sets the time between 2 ticks -> speed '''	def setTicktime(self,time):		self.worker.setTickTime(time)	''' tunnel for log messages '''	def __log(self, msg):		print 'EventManager:\t' + msg